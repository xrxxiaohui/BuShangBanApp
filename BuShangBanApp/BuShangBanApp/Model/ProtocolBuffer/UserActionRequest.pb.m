// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "UserActionRequest.pb.h"

@implementation UserActionRequestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserActionRequestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface UserAction ()
@property int32_t uid;
@property (retain) NSString* version;
@property (retain) NSString* userAction;
@property (retain) NSString* channel;
@property (retain) NSString* deviceType;
@property (retain) NSString* deviceId;
@property (retain) NSString* sysVersion;
@property (retain) NSString* language;
@property (retain) NSString* timeZone;
@property (retain) NSString* resolution;
@end

@implementation UserAction

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) value {
  hasUid_ = !!value;
}
@synthesize uid;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value {
  hasVersion_ = !!value;
}
@synthesize version;
- (BOOL) hasUserAction {
  return !!hasUserAction_;
}
- (void) setHasUserAction:(BOOL) value {
  hasUserAction_ = !!value;
}
@synthesize userAction;
- (BOOL) hasChannel {
  return !!hasChannel_;
}
- (void) setHasChannel:(BOOL) value {
  hasChannel_ = !!value;
}
@synthesize channel;
- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) value {
  hasDeviceType_ = !!value;
}
@synthesize deviceType;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value {
  hasDeviceId_ = !!value;
}
@synthesize deviceId;
- (BOOL) hasSysVersion {
  return !!hasSysVersion_;
}
- (void) setHasSysVersion:(BOOL) value {
  hasSysVersion_ = !!value;
}
@synthesize sysVersion;
- (BOOL) hasLanguage {
  return !!hasLanguage_;
}
- (void) setHasLanguage:(BOOL) value {
  hasLanguage_ = !!value;
}
@synthesize language;
- (BOOL) hasTimeZone {
  return !!hasTimeZone_;
}
- (void) setHasTimeZone:(BOOL) value {
  hasTimeZone_ = !!value;
}
@synthesize timeZone;
- (BOOL) hasResolution {
  return !!hasResolution_;
}
- (void) setHasResolution:(BOOL) value {
  hasResolution_ = !!value;
}
@synthesize resolution;
- (void) dealloc {
  self.version = nil;
  self.userAction = nil;
  self.channel = nil;
  self.deviceType = nil;
  self.deviceId = nil;
  self.sysVersion = nil;
  self.language = nil;
  self.timeZone = nil;
  self.resolution = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.version = @"";
    self.userAction = @"";
    self.channel = @"";
    self.deviceType = @"";
    self.deviceId = @"";
    self.sysVersion = @"";
    self.language = @"";
    self.timeZone = @"";
    self.resolution = @"";
  }
  return self;
}
static UserAction* defaultUserActionInstance = nil;
+ (void) initialize {
  if (self == [UserAction class]) {
    defaultUserActionInstance = [[UserAction alloc] init];
  }
}
+ (UserAction*) defaultInstance {
  return defaultUserActionInstance;
}
- (UserAction*) defaultInstance {
  return defaultUserActionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasVersion) {
    return NO;
  }
  if (!self.hasUserAction) {
    return NO;
  }
  if (!self.hasChannel) {
    return NO;
  }
  if (!self.hasDeviceType) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasSysVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeInt32:1 value:self.uid];
  }
  if (self.hasVersion) {
    [output writeString:2 value:self.version];
  }
  if (self.hasUserAction) {
    [output writeString:3 value:self.userAction];
  }
  if (self.hasChannel) {
    [output writeString:4 value:self.channel];
  }
  if (self.hasDeviceType) {
    [output writeString:5 value:self.deviceType];
  }
  if (self.hasDeviceId) {
    [output writeString:6 value:self.deviceId];
  }
  if (self.hasSysVersion) {
    [output writeString:7 value:self.sysVersion];
  }
  if (self.hasLanguage) {
    [output writeString:8 value:self.language];
  }
  if (self.hasTimeZone) {
    [output writeString:9 value:self.timeZone];
  }
  if (self.hasResolution) {
    [output writeString:10 value:self.resolution];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUid) {
    size += computeInt32Size(1, self.uid);
  }
  if (self.hasVersion) {
    size += computeStringSize(2, self.version);
  }
  if (self.hasUserAction) {
    size += computeStringSize(3, self.userAction);
  }
  if (self.hasChannel) {
    size += computeStringSize(4, self.channel);
  }
  if (self.hasDeviceType) {
    size += computeStringSize(5, self.deviceType);
  }
  if (self.hasDeviceId) {
    size += computeStringSize(6, self.deviceId);
  }
  if (self.hasSysVersion) {
    size += computeStringSize(7, self.sysVersion);
  }
  if (self.hasLanguage) {
    size += computeStringSize(8, self.language);
  }
  if (self.hasTimeZone) {
    size += computeStringSize(9, self.timeZone);
  }
  if (self.hasResolution) {
    size += computeStringSize(10, self.resolution);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserAction*) parseFromData:(NSData*) data {
  return (UserAction*)[[[UserAction builder] mergeFromData:data] build];
}
+ (UserAction*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAction*)[[[UserAction builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserAction*) parseFromInputStream:(NSInputStream*) input {
  return (UserAction*)[[[UserAction builder] mergeFromInputStream:input] build];
}
+ (UserAction*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAction*)[[[UserAction builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAction*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserAction*)[[[UserAction builder] mergeFromCodedInputStream:input] build];
}
+ (UserAction*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserAction*)[[[UserAction builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserAction_Builder*) builder {
  return [[[UserAction_Builder alloc] init] autorelease];
}
+ (UserAction_Builder*) builderWithPrototype:(UserAction*) prototype {
  return [[UserAction builder] mergeFrom:prototype];
}
- (UserAction_Builder*) builder {
  return [UserAction builder];
}
@end

@interface UserAction_Builder()
@property (retain) UserAction* result;
@end

@implementation UserAction_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserAction alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserAction_Builder*) clear {
  self.result = [[[UserAction alloc] init] autorelease];
  return self;
}
- (UserAction_Builder*) clone {
  return [UserAction builderWithPrototype:result];
}
- (UserAction*) defaultInstance {
  return [UserAction defaultInstance];
}
- (UserAction*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserAction*) buildPartial {
  UserAction* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserAction_Builder*) mergeFrom:(UserAction*) other {
  if (other == [UserAction defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasUserAction) {
    [self setUserAction:other.userAction];
  }
  if (other.hasChannel) {
    [self setChannel:other.channel];
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasSysVersion) {
    [self setSysVersion:other.sysVersion];
  }
  if (other.hasLanguage) {
    [self setLanguage:other.language];
  }
  if (other.hasTimeZone) {
    [self setTimeZone:other.timeZone];
  }
  if (other.hasResolution) {
    [self setResolution:other.resolution];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserAction_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readInt32]];
        break;
      }
      case 18: {
        [self setVersion:[input readString]];
        break;
      }
      case 26: {
        [self setUserAction:[input readString]];
        break;
      }
      case 34: {
        [self setChannel:[input readString]];
        break;
      }
      case 42: {
        [self setDeviceType:[input readString]];
        break;
      }
      case 50: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 58: {
        [self setSysVersion:[input readString]];
        break;
      }
      case 66: {
        [self setLanguage:[input readString]];
        break;
      }
      case 74: {
        [self setTimeZone:[input readString]];
        break;
      }
      case 82: {
        [self setResolution:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return result.hasUid;
}
- (int32_t) uid {
  return result.uid;
}
- (UserAction_Builder*) setUid:(int32_t) value {
  result.hasUid = YES;
  result.uid = value;
  return self;
}
- (UserAction_Builder*) clearUid {
  result.hasUid = NO;
  result.uid = 0;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (NSString*) version {
  return result.version;
}
- (UserAction_Builder*) setVersion:(NSString*) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (UserAction_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = @"";
  return self;
}
- (BOOL) hasUserAction {
  return result.hasUserAction;
}
- (NSString*) userAction {
  return result.userAction;
}
- (UserAction_Builder*) setUserAction:(NSString*) value {
  result.hasUserAction = YES;
  result.userAction = value;
  return self;
}
- (UserAction_Builder*) clearUserAction {
  result.hasUserAction = NO;
  result.userAction = @"";
  return self;
}
- (BOOL) hasChannel {
  return result.hasChannel;
}
- (NSString*) channel {
  return result.channel;
}
- (UserAction_Builder*) setChannel:(NSString*) value {
  result.hasChannel = YES;
  result.channel = value;
  return self;
}
- (UserAction_Builder*) clearChannel {
  result.hasChannel = NO;
  result.channel = @"";
  return self;
}
- (BOOL) hasDeviceType {
  return result.hasDeviceType;
}
- (NSString*) deviceType {
  return result.deviceType;
}
- (UserAction_Builder*) setDeviceType:(NSString*) value {
  result.hasDeviceType = YES;
  result.deviceType = value;
  return self;
}
- (UserAction_Builder*) clearDeviceType {
  result.hasDeviceType = NO;
  result.deviceType = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (UserAction_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (UserAction_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasSysVersion {
  return result.hasSysVersion;
}
- (NSString*) sysVersion {
  return result.sysVersion;
}
- (UserAction_Builder*) setSysVersion:(NSString*) value {
  result.hasSysVersion = YES;
  result.sysVersion = value;
  return self;
}
- (UserAction_Builder*) clearSysVersion {
  result.hasSysVersion = NO;
  result.sysVersion = @"";
  return self;
}
- (BOOL) hasLanguage {
  return result.hasLanguage;
}
- (NSString*) language {
  return result.language;
}
- (UserAction_Builder*) setLanguage:(NSString*) value {
  result.hasLanguage = YES;
  result.language = value;
  return self;
}
- (UserAction_Builder*) clearLanguage {
  result.hasLanguage = NO;
  result.language = @"";
  return self;
}
- (BOOL) hasTimeZone {
  return result.hasTimeZone;
}
- (NSString*) timeZone {
  return result.timeZone;
}
- (UserAction_Builder*) setTimeZone:(NSString*) value {
  result.hasTimeZone = YES;
  result.timeZone = value;
  return self;
}
- (UserAction_Builder*) clearTimeZone {
  result.hasTimeZone = NO;
  result.timeZone = @"";
  return self;
}
- (BOOL) hasResolution {
  return result.hasResolution;
}
- (NSString*) resolution {
  return result.resolution;
}
- (UserAction_Builder*) setResolution:(NSString*) value {
  result.hasResolution = YES;
  result.resolution = value;
  return self;
}
- (UserAction_Builder*) clearResolution {
  result.hasResolution = NO;
  result.resolution = @"";
  return self;
}
@end

